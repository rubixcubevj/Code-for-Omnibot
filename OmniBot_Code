#include <PS2X_lib.h>  //for v1.6
#include <Servo.h>
Servo myservo0;
Servo myservo1;
Servo myservo2;

int motorPowers[3];

PS2X ps2x; // create PS2 Controller Class

//right now, the library does NOT support hot pluggable controllers, meaning 
//you must always either restart your Arduino after you conect the controller, 
//or call config_gamepad(pins) again after connecting the controller.
int error = 0; 
byte type = 0;
byte vibrate = 0;

void setup(){
 Serial.begin(57600);
  myservo0.attach(6);
  myservo1.attach(7);
  myservo2.attach(8);
  
 error = ps2x.config_gamepad(13,11,10,12, true, true);   //setup pins and settings:  GamePad(clock, command, attention, data, Pressures?, Rumble?) check for error
 
 if(error == 0){
   Serial.println("Found Controller, configured successful");
   Serial.println("Try out all the buttons, X will vibrate the controller, faster as you press harder;");
  Serial.println("holding L1 or R1 will print out the analog stick values.");
  Serial.println("Go to www.billporter.info for updates and to report bugs.");
 }
   
  else if(error == 1)
   Serial.println("No controller found, check wiring, see readme.txt to enable debug. visit www.billporter.info for troubleshooting tips");
   
  else if(error == 2)
   Serial.println("Controller found but not accepting commands. see readme.txt to enable debug. Visit www.billporter.info for troubleshooting tips");
   
  else if(error == 3)
   Serial.println("Controller refusing to enter Pressures mode, may not support it. ");
   
   //Serial.print(ps2x.Analog(1), HEX);
   
   type = ps2x.readType(); 
     switch(type) {
       case 0:
        Serial.println("Unknown Controller type");
       break;
       case 1:
        Serial.println("DualShock Controller Found");
       break;
       /*case 2:
         Serial.println("GuitarHero Controller Found");
       break;*/
     }
  
}

void loop(){
//    Serial.println("LOOP");
   /* You must Read Gamepad to get new values
   Read GamePad and set vibration values
   ps2x.read_gamepad(small motor on/off, larger motor strenght from 0-255)
   if you don't enable the rumble, use ps2x.read_gamepad(); with no values
   
   you should call this at least once a second
   */
   
   
  if(error == 1) //skip loop if no controller found
    return; 
  
   if(type == 2){ 
     ps2x.read_gamepad();          ////read controller 
   }else{ //DualShock Controller
      ps2x.read_gamepad(false, vibrate);          ////read controller and set large motor to spin at 'vibrate' speed
        
      if(ps2x.Button(PSB_START))                   //will be TRUE as long as button is pressed
           Serial.println("Start is being held");
      if(ps2x.Button(PSB_SELECT))
           Serial.println("Select is being held");
         
      static bool upState;     
      if(ps2x.Button(PSB_PAD_UP)){
        Serial.println("Up held this hard: ");
        upState = true;
        motorPowers[0] = -70;
        motorPowers[2] = -70;
      }
      
      if(ps2x.Button(PSB_PAD_RIGHT)){
       Serial.println("Right held this hard: ");
        Serial.println(ps2x.Analog(PSAB_PAD_RIGHT), DEC);
      }
      
      if(ps2x.Button(PSB_PAD_LEFT)){
       Serial.println("LEFT held this hard: ");
        Serial.println(ps2x.Analog(PSAB_PAD_LEFT), DEC);
      }
      
      static bool downState; 
      if(ps2x.Button(PSB_PAD_DOWN)){
         Serial.println("DOWN held this hard: ");
         downState = true;
        motorPowers[0] = 70;
        motorPowers[2] = 70;
      }
    
      
        vibrate = ps2x.Analog(PSAB_BLUE);        ////this will set the large motor vibrate speed based on 
                                                //how hard you press the blue (X) button    
      
      /*if (ps2x.NewButtonState())               //will be TRUE if any button changes state (on to off, or off to on)
      {
          if(ps2x.Button(PSB_L3))
           Serial.println("L3 pressed");
          if(ps2x.Button(PSB_R3))
           Serial.println("R3 pressed");
          if(ps2x.Button(PSB_L2))
           Serial.println("L2 pressed");
          if(ps2x.Button(PSB_R2))
           Serial.println("R2 pressed");
          if(ps2x.Button(PSB_GREEN))
           Serial.println("Triangle pressed");
           
      }  */ 
           
      static bool redState;
      if(ps2x.ButtonPressed(PSB_RED)){          //will be TRUE if button was JUST pressed
         Serial.println("Circle just pressed");
         redState = true;
      }
      if(ps2x.ButtonReleased(PSB_RED)) {
        redState = false;
      }
      if(redState) {
        motorPowers[0] = 20; 
        motorPowers[1] = 70;
        motorPowers[2] = 20; 
      }
      
      static bool pinkState;////
      if(ps2x.ButtonPressed(PSB_PINK))  {           //will be TRUE if button was JUST released
         Serial.println("Square just released");
        pinkState = true;////
      }
      if(ps2x.ButtonReleased(PSB_PINK)) {
        pinkState = false;////
      }
      
      if(pinkState) {       ////
        motorPowers[0] = -20; 
        motorPowers[1] = -70;
        motorPowers[2] = -20; 
      }
      
      if(ps2x.NewButtonState(PSB_BLUE)) {
        Serial.println("X just changed");    
        
        motorPowers[0] = 0;
        motorPowers[1] = 0;
        motorPowers[2] = 0;
      }
      
      /*if(ps2x.Button(PSB_L1) || ps2x.Button(PSB_R1)) // print stick values if either is TRUE
      {
          Serial.print("Stick Values:");
          Serial.print(ps2x.Analog(PSS_LY), DEC); //Left stick, Y axis. Other options: LX, RY, RX  
          Serial.print(",");
          Serial.print(ps2x.Analog(PSS_LX), DEC); 
          Serial.print(",");
          Serial.print(ps2x.Analog(PSS_RY), DEC); 
          Serial.print(",");
          Serial.println(ps2x.Analog(PSS_RX), DEC); 
      } 
      */
      
   }
 
 myservo0.write(90 + motorPowers[0]);
 myservo1.write(90 + motorPowers[1]);
 myservo2.write(90 + motorPowers[2]);
 delay(50);
     
}
